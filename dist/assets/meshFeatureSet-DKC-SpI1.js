import{eU as h,y as d,eV as l,ct as S,a7 as g,b6 as N,al as D}from"./index-S9cgEMoY.js";import E from"./Mesh-CqU9HM8Q.js";import{i as M,a as F}from"./External-CpEYdQ71.js";import{n as T,i as b}from"./meshFeatureAttributes-Dy0KlkC2.js";import"./axisAngleDegrees-DfLed3y0.js";import"./quat-kYOzEOES.js";import"./mat3f64-q3fE-ZOt.js";import"./quatf64-aQ5IuZRd.js";import"./MeshComponent-hKoJz6o4.js";import"./meshProperties-C4iW0Ukm.js";import"./MeshLocalVertexSpace-C6N1vskc.js";import"./MeshTransform-5pST2SZ5.js";import"./mat4f64-Dk4dwAN8.js";import"./MeshVertexAttributes-CDJNlfcM.js";import"./meshVertexSpaceUtils-Bj9bC9CH.js";import"./triangulationUtils-D0l9yQ4q.js";import"./earcut-D9gy186-.js";import"./Indices-D1dawiaF.js";import"./plane-DbjBA31T.js";import"./deduplicate-CjNJRaXL.js";import"./projectPointToVector-CFkwHY3w.js";import"./vertexSpaceConversion-Buu86wsp.js";import"./spatialReferenceEllipsoidUtils-CZgh-C5n.js";import"./computeTranslationToOriginAndRotation-B_K9s3J6.js";import"./vec3-kZ5cjluG.js";import"./BufferView-DKR-QjAK.js";import"./vec4-wsixCHeu.js";const w=()=>d.getLogger("esri.rest.support.meshFeatureSet");function nt(t,o,e){const r=e.features;e.features=[],delete e.geometryType;const s=g.fromJSON(e);if(s.geometryType="mesh",!e.assetMaps)return s;const n=O(o,e.assetMaps),i=t.sourceSpatialReference??N.WGS84,m=e.globalIdFieldName,{outFields:a}=t,c=a!=null&&a.length>0?I(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const p=L(u,m,i,o,n);s.features.push(new D({geometry:p,attributes:c(u)}))}return s}function I(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const e in o)t.has(e)||delete o[e];return o}}function L(t,o,e,r,s){const n=t.attributes[o],i=s.get(n);if(i==null||!t.geometry)return null;const m=T(t.attributes,e,r.transformFieldRoles),a=S.fromJSON(t.geometry);a.spatialReference=e;const c=b(t.attributes,r.transformFieldRoles),u=e.isGeographic?"local":"georeferenced",p=P(i);return p?E.createWithExternalSource(m,p,{extent:a,transform:c,vertexSpace:u,unitConversionDisabled:!0}):E.createIncomplete(m,{extent:a,transform:c,vertexSpace:u})}var f;function O(t,o){const e=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,c=r.conversionStatus,u=r.seqNo,p=h(i,t.supportedFormats);if(!p){w().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const y=l(e,s,()=>({files:new Map}));l(y.files,n,()=>({name:n,type:i,mimeType:p,status:$(c),parts:[]})).parts[u]={hash:m,url:a}}return e}function P(t){const o=Array.from(t.files.values()),e=new Array;for(const r of o){if(r.status!==f.COMPLETED)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new M(n.url,n.hash))}e.push(new F(r.name,r.mimeType,s))}return e}function $(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{O as assetMapFromAssetMapsJSON,L as extractMesh,nt as meshFeatureSetFromJSON};
