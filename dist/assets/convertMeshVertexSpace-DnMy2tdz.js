import{$ as s,s as m,a6 as p}from"./index-S9cgEMoY.js";import{p as n}from"./MeshVertexAttributes-CDJNlfcM.js";import{B as a}from"./vertexSpaceConversion-Buu86wsp.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-CZgh-C5n.js";import"./computeTranslationToOriginAndRotation-B_K9s3J6.js";import"./projectPointToVector-CFkwHY3w.js";import"./meshVertexSpaceUtils-Bj9bC9CH.js";import"./MeshLocalVertexSpace-C6N1vskc.js";import"./vec3-kZ5cjluG.js";import"./BufferView-DKR-QjAK.js";import"./vec4-wsixCHeu.js";async function E(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
