import{$ as s,s as m,a6 as p}from"./index-BlXvYXyk.js";import{p as n}from"./MeshVertexAttributes-DbJ8YDP3.js";import{B as a}from"./vertexSpaceConversion-Cmk7CPcZ.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-Mt3QyBfF.js";import"./computeTranslationToOriginAndRotation-B3-3qzNY.js";import"./projectPointToVector-y5-RRnCv.js";import"./meshVertexSpaceUtils-Cy8vt5RD.js";import"./MeshLocalVertexSpace-CUFY1u1F.js";import"./vec3-CXVpZ2zZ.js";import"./BufferView-CaA3mtI_.js";import"./vec4-CAzr02Pv.js";async function E(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
